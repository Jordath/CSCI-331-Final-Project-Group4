{"version":3,"sources":["components/recipes/RecipeItem.js","components/searchRecipes/searchRecipes.js","components/showRecipes/showRecipes.js","style.js","App.js","reportWebVitals.js","index.js"],"names":["RecipeItem","BasicTextFields","React","setPrint","ingName1","ingName2","ingName3","ingName4","ingName5","ingredients","setIngredients","Box","component","sx","m","width","noValidate","autoComplete","type","id","name","label","variant","placeholder","value","onChange","e","target","Button","onClick","ingListStringArray","push","console","log","onClickIngHandler","FoundRecipes","useState","recipes","setRecipes","useEffect","axios","get","then","data","catch","error","map","recipe","index","recipeName","steps","makeStyles","appBar","borderRadius","margins","display","flexDirection","justifyContent","alignItems","fill","background","App","classes","useStyles","className","Container","maxWidth","AppBar","position","color","Typography","heading","align","Grow","in","Grid","container","justify","item","xs","sm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35205468.chunk.js","sourcesContent":["import classes from './RecipeItem.module.css';\r\n\r\nfunction RecipeItem(props) {\r\n    return <li>\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n\r\n        </div>\r\n    </li>\r\n}\r\n\r\nexport default RecipeItem;","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { useState } from 'react';\r\nimport FoundRecipes from '../showRecipes/showRecipes';\r\n\r\nexport default function BasicTextFields() {\r\n  let ingredientList = []\r\n  //const ingredientList = React.useState();\r\n  // this.state = {\r\n  //   ingredient1: \"\",\r\n  //   ingredient2: \"\",\r\n  //   ingredient3: \"\",\r\n  //   ingredient4: \"\",\r\n  //   ingredient5: \"\"\r\n  // };\r\n  // function handleClick () {console.log(this.state);}\r\n  function handleClick () {\r\n    ingredientList.concat()\r\n  }\r\n  \r\n  const [data, setData] = React.useState([]);\r\n  const [print, setPrint]= React.useState(false);\r\n  const [ingredients, setIngredients] = React.useState([\r\n    {ingName1: \"ing1\"},\r\n    {ingName2: \"ing2\"},\r\n    {ingName3: \"ing3\"},\r\n    {ingName4: \"ing4\"},\r\n    {ingName5: \"ing5\"}\r\n  ]);\r\n  // const [ingredients, setIngredients] = React.useState([\r\n  //   {ing1:1, ingName1: \"ing1\"},\r\n  //   {ing2:2, ingName2: \"ing2\"},\r\n  //   {ing3:3, ingName3: \"ing3\"},\r\n  //   {ing4:4, ingName4: \"ing4\"},\r\n  //   {ing5:5, ingName5: \"ing5\"}\r\n  // ]);\r\n\r\n  const onClickHandler= (val) =>{\r\n    let nObj = {ing:6, ingName: \"Test\"}\r\n    let newIngredients = ingredients.concat(nObj)\r\n    setIngredients(newIngredients);\r\n  }\r\n\r\n  const onClickIngHandler= (ingredients) =>{\r\n    let ingListStringArray = [];\r\n    ingListStringArray.push(ingredients.ingName1);\r\n    ingListStringArray.push(ingredients.ingName2);\r\n    ingListStringArray.push(ingredients.ingName3);\r\n    ingListStringArray.push(ingredients.ingName4);\r\n    ingListStringArray.push(ingredients.ingName5);\r\n    console.log(ingListStringArray);\r\n    return ingListStringArray;\r\n  }\r\n  //let ingredientList = [{\"ingr1\":\"\"}, {\"ingr2\":\"\"}, {\"ingr3\":\"\"}, {\"ingr4\":\"\"}, {\"ingr5\":\"\"}];\r\n  //let i = 0;\r\n  function getData(val){\r\n\r\n    // setData([... data, {\r\n    //   id: data.length,\r\n    //   value: val.target.value\r\n    // }])\r\n\r\n    // for(i = 0; i < val.length; i++){\r\n    //   ingredientList[i] = val.target[i].value\r\n    // }\r\n    //setData(ingredientList)\r\n    //ingredientList.set(ingr1: val.target.value);\r\n    setData(val.target.value)\r\n    //setData(data => [...data, print]);\r\n    //setPrint(false)\r\n    console.log(val)\r\n  }\r\n  \r\n\r\n  return (\r\n    <>\r\n    <h2>Search Recipes</h2>\r\n    <Box\r\n      component=\"form\" \r\n      sx={{\r\n        '& > :not(style)': { m: 1, width: '25ch' },\r\n      }}\r\n      noValidate\r\n      autoComplete=\"off\"\r\n    >\r\n\r\n      {/* <form>\r\n        <label for=\"ingredient1\"> Ingredient 1 : </label>\r\n        <input type=\"text\" id=\"ingredient1\" name=\"ingredient1\" placeholder=\"ingredient1\"\r\n      </form> */}\r\n      <form>\r\n        <input\r\n          type='text'id=\"Ingredient1\" name=\"ingredient1\" label=\"Ingredient1\" variant=\"outlined\" placeholder=\"Ingredient 1\"\r\n          value={ingredients.ingName1}\r\n          onChange={e => setIngredients({...ingredients, ingName1: e.target.value})} \r\n          />\r\n        <input\r\n          type='text' id=\"Ingredient2\" name=\"ingredient2\" label=\"Ingredient2\" variant=\"outlined\" placeholder=\"Ingredient 2\"\r\n          value={ingredients.ingName2}\r\n          onChange={e => setIngredients({...ingredients, ingName2: e.target.value})} \r\n          />\r\n        <input\r\n          type='text' id=\"Ingredient3\" name=\"ingredient3\" label=\"Ingredient3\" variant=\"outlined\" placeholder=\"Ingredient 3\"\r\n          value={ingredients.ingName3}\r\n          onChange={e => setIngredients({...ingredients, ingName3: e.target.value})} \r\n          />\r\n        <input\r\n          type='text' id=\"Ingredient4\" name=\"ingredient4\" label=\"Ingredient4\" variant=\"outlined\" placeholder=\"Ingredient 4\"\r\n          value={ingredients.ingName4}\r\n          onChange={e => setIngredients({...ingredients, ingName4: e.target.value})} \r\n          />\r\n        <input\r\n          type='text' id=\"Ingredient5\" name=\"ingredient5\" label=\"Ingredient5\" variant=\"outlined\" placeholder=\"Ingredient 5\"\r\n          value={ingredients.ingName5}\r\n          onChange={e => setIngredients({...ingredients, ingName5: e.target.value})} \r\n          />          \r\n        {/* <h2>First ingredient: {ingredients.ingName1}</h2>\r\n        <h2>Second ingredient: {ingredients.ingName2}</h2>\r\n        <h2>Third ingredient: {ingredients.ingName3}</h2>\r\n        <h2>Fourth ingredient: {ingredients.ingName4}</h2>\r\n        <h2>Fifth ingredient: {ingredients.ingName5}</h2>\r\n        <p>{JSON.stringify(ingredients)}</p> */}\r\n      </form>\r\n      \r\n{/* \r\n      <TextField id=\"Ingredient1\" name=\"ingredient1\" label=\"Ingredient1\" variant=\"outlined\" />\r\n      <TextField id=\"Ingredient2\" name=\"ingredient2\" label=\"Ingredient2\" variant=\"outlined\" />\r\n      <TextField id=\"Ingredient3\" name=\"ingredient3 \"label=\"Ingredient3\" variant=\"outlined\" />\r\n      <TextField id=\"Ingredient4\" name=\"ingredient4\" label=\"Ingredient4\" variant=\"outlined\" />\r\n      <TextField id=\"Ingredient5\" name=\"ingredient5\" label=\"Ingredient5\" variant=\"outlined\" /> */}\r\n      <Button onClick={()=> {setPrint(true); onClickIngHandler(ingredients); FoundRecipes();}} variant=\"contained\">Search For Recipes</Button>\r\n{/* \r\n      {print?\r\n      data: null} */}\r\n \r\n      {/* <ul>\r\n      {data.map(ing =>(\r\n        <li key={ing.id}>{ing.value}</li>\r\n      ))}\r\n      </ul> */}\r\n\r\n      {/* <ul>{\r\n        ingredients.map(pObj=>(\r\n          <li key={pObj.ing}>{pObj.ingName}</li>\r\n        )\r\n        )}\r\n        </ul> */}\r\n\r\n    </Box>\r\n    </>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport RecipesList from '../recipes/RecipesList';\r\nimport ingListStringArray from '../searchRecipes/searchRecipes.js';\r\n\r\n\r\nexport default function FoundRecipes() {\r\n  \r\nconst [recipes, setRecipes] = useState([]);\r\nuseEffect(() => {\r\n  axios\r\n  .get(\"http://localhost:5000/api/v1/restaurants\")\r\n  .then(({data}) => setRecipes(data.recipes))\r\n  .catch((error) => console.log(error));\r\n}, []);\r\nconsole.log(recipes)\r\nconsole.log(ingListStringArray);\r\n\r\n  /*\r\n  const [listOfRecipes, setListOfRecipes] = useState([]);\r\n  useEffect(() => {\r\n    axios.get(\"http://localhost:5000/api/v1/restaurants\")\r\n    .then((response) => {\r\n      setListOfRecipes(response.data)\r\n    })\r\n  }, []);\r\n  console.log(listOfRecipes)\r\n  */\r\n\r\n /*\r\n const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    axios\r\n    .get(\"http://localhost:5000/api/v1/restaurants\")\r\n    .then(res=> setData(res.data))\r\n    .catch(error => console.log(error));\r\n  });\r\n  console.log(data);\r\n  */\r\n\r\n\r\n /* const [isLoading, setIsLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n      useEffect(() => {\r\n        fetch(\"http://localhost:5000/api/v1/restaurants\")\r\n          .then((response) => {\r\n            return response.json();\r\n          }) \r\n          .then((data) => {\r\n            const recipes = [];\r\n            for (const key in data) {\r\n              const recipe = {\r\n                id: key,\r\n                ...data[key]\r\n              };\r\n              recipes.push({recipe})\r\n            }\r\n            setIsLoading(false);\r\n            setData(recipes);\r\n          })\r\n          }, []);\r\n          \r\n          if(isLoading) {\r\n            return (\r\n              <section>\r\n                <p>Loading...</p>\r\n              </section>\r\n            );\r\n          }\r\n          console.log(data); */\r\n\r\n  /*  \r\n  return (\r\n    <section>\r\n      <h1>Recipes Found:</h1>\r\n      <p>{recipes[0].recipeName}</p>\r\n\r\n    </section>    \r\n  ) \r\n  */\r\n\r\n  return recipes.map((recipe, index) => (\r\n    <div key={index}>\r\n      <h3>{recipe.recipeName}</h3>\r\n    <ul>\r\n      <li>{recipe.ingredients}</li>\r\n    </ul>\r\n    <ul>\r\n      <li>{recipe.steps}</li>\r\n    </ul>\r\n    <p>{ingListStringArray}</p>\r\n    </div>\r\n    \r\n    )\r\n  )\r\n}\r\n\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles(() => ({\r\n    appBar: {\r\n        borderRadius: 15,\r\n        margins: '30px 0',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        fill: 'black',\r\n        background: 'crimson',\r\n    }\r\n}))","import './App.css';\r\nimport { Container, AppBar, Typography, Grow, Grid } from '@material-ui/core';\r\nimport { mergeClasses } from '@material-ui/styles';\r\nimport Recipes from './components/showRecipes/showRecipes.js';\r\nimport Search from './components/searchRecipes/searchRecipes.js';\r\nimport useStyles from './style';\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className=\"App\">\r\n        <Container maxWidth =\"lg\">\r\n          <AppBar className={classes.AppBar} position=\"static\" color=\"inherit\" >\r\n            <Typography className={classes.heading} variant=\"h2\" align=\"center\">\r\n              Recipes \r\n            </Typography>\r\n          </AppBar>\r\n\r\n          <Grow in>\r\n            <Container>\r\n              <Grid container justify=\"space-between\" alignItems=\"stretch\">\r\n                <Grid item xs={12} sm={4}>\r\n                  <AppBar className={classes.appBar} position=\"static\" color=\"inherit\">\r\n                    <Search />\r\n                  </AppBar>\r\n                </Grid>\r\n                <Grid item xs={12} sm={7}>\r\n                  <AppBar className={classes.appBar} position=\"static\" color=\"inherit\">\r\n                    <Recipes />\r\n                  </AppBar>\r\n                </Grid>\r\n\r\n\r\n              </Grid>\r\n            </Container>\r\n          </Grow>\r\n\r\n        </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}